/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.campominado.view;

import com.campominado.bd.PartidaBeans;
import com.campominado.bd.PartidaDAO;
import com.campominado.controller.CampoVirtual;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Calendar;
import java.util.Date;
import javax.swing.ImageIcon;

import javax.swing.JOptionPane;

import javax.swing.table.DefaultTableModel;


/**
 *
 * @author ander
 */
public class FrameCampo extends javax.swing.JInternalFrame {

    private CampoVirtual campoVirtual;
    private int casasSemBomba;
    private Calendar tempoInicio;
    private String nivel;
    
    /**
     * Creates new form FrameCampo
     */
    public FrameCampo(String nivel) {
        initComponents();  
        gerarTabela(nivel); 
        this.casasSemBomba = this.campoVirtual.getQuantidadeLinhasCampo() * this.campoVirtual.getQuantidadeColunasCampo() - this.campoVirtual.getQuantidadeBombas();        
        this.tempoInicio = Calendar.getInstance();
        this.nivel = nivel;
    }

    public CampoVirtual getCampoVirtual() {
        return campoVirtual;
    }

    public int getCasasSemBomba() {
        return casasSemBomba;
    }
    
    private void gerarTabela(String nivel){
        this.campoVirtual = new CampoVirtual(nivel);
        
        this.tblCampo.setTableHeader(null);
        this.tblCampo.setShowGrid(true);
        
        int quantidadeColunas = this.campoVirtual.getQuantidadeColunasCampo();
        int quantidadeLinhas = this.campoVirtual.getQuantidadeLinhasCampo();
                
        
        DefaultTableModel modelo = new DefaultTableModel(){
            
            @Override
            public boolean isCellEditable(int linha, int coluna){
                return false;
            }
        };
   
        for(int addColuna = 0; addColuna < quantidadeColunas; addColuna++){
            modelo.addColumn("");
        }
        
        for(int addLinha = 0; addLinha < quantidadeLinhas; addLinha++){
            modelo.addRow(new String[0]);
        }  
       
        this.tblCampo.setModel(modelo);
    }
    
    private void preencherAreaRedorVazio(int linhaVazio, int colunaVazio){
        int linhaAreaProxima;
        int colunaAreaProxima;

        for(int acrescimoLinha = -1; acrescimoLinha <= 1; acrescimoLinha++){
            for(int acrescimoColuna = -1; acrescimoColuna <= 1; acrescimoColuna++){

                linhaAreaProxima = linhaVazio + acrescimoLinha;
                colunaAreaProxima = colunaVazio + acrescimoColuna;

                if((linhaAreaProxima < 0 || linhaAreaProxima >= this.campoVirtual.getQuantidadeLinhasCampo()) || (colunaAreaProxima < 0 || colunaAreaProxima >= this.campoVirtual.getQuantidadeColunasCampo()))
                    continue;

                int conteudo = this.campoVirtual.getConteudo(linhaAreaProxima, colunaAreaProxima);
                
                this.tblCampo.getModel().setValueAt(conteudo, linhaAreaProxima, colunaAreaProxima);
                this.campoVirtual.casaVisualizada(linhaAreaProxima, colunaAreaProxima); 
            }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblCampo = new javax.swing.JTable();

        tblCampo.setBackground(new java.awt.Color(153, 153, 153));
        tblCampo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tblCampo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblCampo.setCellSelectionEnabled(true);
        tblCampo.setGridColor(new java.awt.Color(0, 0, 0));
        tblCampo.setRowHeight(30);
        tblCampo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCampoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCampo);
        tblCampo.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 686, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblCampoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCampoMouseClicked
        int linha = this.tblCampo.getSelectedRow();
        int coluna = this.tblCampo.getSelectedColumn();
        
        int conteudo = this.campoVirtual.getConteudo(linha, coluna);
                
        if(conteudo > 0){
            this.tblCampo.getModel().setValueAt(conteudo, linha, coluna);
            this.campoVirtual.casaVisualizada(linha, coluna);          
        }else if(conteudo == 0){
            
            int codAreaVazioDetectado = this.campoVirtual.getCodAreaVazio(linha, coluna);
            
            for(int linhaCampoAreaVazio = 0; linhaCampoAreaVazio < this.campoVirtual.getQuantidadeLinhasCampo(); linhaCampoAreaVazio++){
                for(int colunaCampoAreaVazio = 0; colunaCampoAreaVazio < this.campoVirtual.getQuantidadeColunasCampo(); colunaCampoAreaVazio++){
                    int codAreaVazio = this.campoVirtual.getCodAreaVazio(linhaCampoAreaVazio, colunaCampoAreaVazio);
                    
                    if(codAreaVazio == codAreaVazioDetectado){
                        this.preencherAreaRedorVazio(linhaCampoAreaVazio, colunaCampoAreaVazio);      
                    }
                }
            }
            
        }else {
            for(int numeroBomba = 0; numeroBomba < this.campoVirtual.getQuantidadeBombas(); numeroBomba++){
                this.tblCampo.getModel().setValueAt("*", this.campoVirtual.getBombas()[numeroBomba].getLinha(), this.campoVirtual.getBombas()[numeroBomba].getColuna());
                
                
//                try{
//                    URL url = new URL("\\com\\campominado\\img\\bomba.png");
//                    this.tblCampo.getModel().setValueAt(new ImageIcon("/com/campominado/img/bomba.png"), this.campoVirtual.getBombas()[numeroBomba].getLinha(), this.campoVirtual.getBombas()[numeroBomba].getColuna());
//                }catch(MalformedURLException e){
//                    System.out.println("Deu erro no URL");
//                    System.out.println(e.getMessage());
//                }
//                System.out.println(this.tblCampo.getModel().getValueAt(this.campoVirtual.getBombas()[numeroBomba].getLinha(), this.campoVirtual.getBombas()[numeroBomba].getColuna()));
            }
            JOptionPane.showMessageDialog(null, "Você Perdeu!");
            this.tblCampo.setEnabled(false);
        }
          
        if(this.campoVirtual.quantidadeCasasVisualizadas() == this.getCasasSemBomba()){
            JOptionPane.showMessageDialog(null, "PARABÉNS! Você Ganhou!");
            
            Calendar tempoFim = Calendar.getInstance();
            long duracao = tempoFim.getTimeInMillis() - this.tempoInicio.getTimeInMillis();
            
            PartidaBeans partidaBeans = new PartidaBeans(this.tempoInicio, duracao, this.nivel);
            
            PartidaDAO partidaDAO = new PartidaDAO();
            partidaDAO.adicionar(partidaBeans);
            
            this.dispose();
        }
    }//GEN-LAST:event_tblCampoMouseClicked

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblCampo;
    // End of variables declaration//GEN-END:variables
}
